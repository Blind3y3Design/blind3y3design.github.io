---
import Layout from '@layouts/Base.astro';
import { getCollection } from 'astro:content';
import FormattedTag from '@components/FormattedTag.astro';
import PostPreview from '@components/post/PostPreview.astro';

export async function getStaticPaths() {
    const posts = (await getCollection('writing')).sort(
        (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
    );

    const uniqueTags = [...new Set(posts.map((post) => post.data.tags).flat())];

    return uniqueTags.map((tag) => {
        const urlTag = tag.toLowerCase();
        const filteredPosts = posts.filter((post) =>
            post.data.tags?.includes(tag)
        );

        return {
            params: { tag: urlTag },
            props: { tag, posts: filteredPosts },
        };
    });
}

const { tag, posts } = Astro.props;
---

<Layout
    title={`Posts tagged with ${tag}`}
    description={`Posts tagged with ${tag}`}
>
    <main class="stack | theme-writing">
        <h1>
            Writing <span class="text-secondary">tagged with</span> #<FormattedTag
                {tag}
            />
        </h1>
        <ul class="post-list">
            {
                posts.map((post) => (
                    <PostPreview
                        description={post.body}
                        heroImage={post.data.heroImage}
                        isLinkPost={post.data.tags.includes('link-post')}
                        link={post.slug}
                        pubDate={post.data.pubDate}
                        title={post.data.title}
                        tags={post.data.tags}
                    />
                ))
            }
        </ul>
    </main>
</Layout>

<style>
    h1 {
        margin-block-end: 1em;
    }

    .post-list {
        display: grid;
        gap: var(--space-4) var(--space-2);
        grid-template-columns: repeat(3, 1fr);
        list-style-type: none;
        margin-block-end: 0;
        padding: 0;
    }
</style>
