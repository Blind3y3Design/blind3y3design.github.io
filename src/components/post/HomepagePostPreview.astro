---
import { Icon } from 'astro-icon/components';
import MarkdownIt from 'markdown-it';

import FormattedDate from '@components/FormattedDate.astro';
import FormattedTag from '@components/FormattedTag.astro';

interface Props {
    link: string;
    title: string;
    pubDate: Date;
    isLinkPost?: Boolean;
    description?: string;
    tags: string[];
}

const { description, isLinkPost, link, pubDate, title, tags } = Astro.props;

const parser = new MarkdownIt();

const createExcerpt = (text) => {
    return parser
        .render(text)
        .split('\n')
        .slice(0, 6)
        .map((str) => {
            return str.replace(/(<([^>]+)>)/gi, '').split('\n');
        })
        .flat()
        .join(' ');
};

const excerpt = `${createExcerpt(description).substring(0, 140)}...`;
---

<li class="post-preview stack" data-size="xxs">
    <div class="header">
        <a href={`/writing/${link}/`} class="link">
            <p class="title | fs-md">
                {title}
                {
                    isLinkPost && (
                        <Icon class="link-post-icon" name="mdi:link-variant" />
                    )
                }
            </p>
        </a>
        <FormattedDate class="date" date={pubDate} />
    </div>
    {description && <p class="excerpt">{excerpt}</p>}
    {
        tags && (
            <ul class="tag-list">
                {tags.map((tag: string) => (
                    <li class="tag">
                        <a href={`/writing/tags/${tag}`}>
                            #<FormattedTag tag={tag} />
                        </a>
                    </li>
                ))}
            </ul>
        )
    }
</li>

<style>
    .post-preview {
        .header {
            align-items: first baseline;
            display: flex;
            font-size: var(--font-size-md);
            gap: var(--space-half);
        }

        .link {
            color: var(--link-color);
            margin: 0;
            text-decoration: underline;
            text-decoration-color: transparent;
            text-decoration-skip-ink: auto;
            text-decoration-thickness: 2px;
            text-underline-offset: 0ex;
            transition: all 0.25s ease-in-out;

            &:hover,
            &:focus-visible {
                text-decoration: underline;
                text-decoration-skip-ink: auto;
                text-decoration-thickness: 2px;
                text-underline-offset: 0.2ex;
            }
        }

        .title {
            align-items: center;
            display: flex;
            gap: 0.25em;
        }

        .link-icon {
            height: 1em;
            width: 1em;
        }

        .date {
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
            margin: 0;
        }

        .excerpt {
            max-width: 80ch;
        }

        .tag-list {
            display: none;

            @media (min-width: 600px) {
                display: flex;
            }
        }

        .tag {
            line-height: 1;

            a {
                color: var(--text-secondary);
                font-size: var(--font-size-sm);
                text-decoration-color: transparent;
                transition: all 0.25s ease-in-out;

                &:hover,
                &:focus-visible {
                    text-decoration-color: var(--link-color);
                }
            }
        }
    }
</style>
