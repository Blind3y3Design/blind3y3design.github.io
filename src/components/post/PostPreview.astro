---
import { Icon } from 'astro-icon/components';
import { Picture } from 'astro:assets';
import MarkdownIt from 'markdown-it';

import FormattedDate from '@components/FormattedDate.astro';
import FormattedTag from '@components/FormattedTag.astro';

interface Props {
    description?: string;
    heroImage?: ImageMetadata;
    isLinkPost?: Boolean;
    link: string;
    pubDate: Date;
    title: string;
    tags: string[];
}

const { description, heroImage, isLinkPost, link, pubDate, title, tags } =
    Astro.props;

const parser = new MarkdownIt();

const createExcerpt = (text) => {
    return parser
        .render(text)
        .split('\n')
        .slice(0, 6)
        .map((str) => {
            return str.replace(/(<([^>]+)>)/gi, '').split('\n');
        })
        .flat()
        .join(' ');
};

const excerpt = createExcerpt(description).substring(0, 300);
---

<li class="post-preview | stack" data-size="xxs">
    <a href={`/writing/${link}/`} class="link | stack" data-size="xs">
        {
            heroImage && (
                <Picture
                    class="image"
                    src={heroImage}
                    formats={['avif', 'webp']}
                    alt={title}
                />
            )
        }
        <p class="title | fs-md">
            {title}
            {isLinkPost && <Icon class="link-icon" name="mdi:link-variant" />}
        </p>
    </a>
    <p class="date | fs-sm">
        Posted on <FormattedDate date={pubDate} />
    </p>
    {description && <p class="description">{excerpt}</p>}
    {
        tags && (
            <ul class="tag-list">
                {tags.map((tag: string) => (
                    <li class="tag | fs-sm">
                        <a href={`/writing/tags/${tag}`}>
                            #<FormattedTag tag={tag} />
                        </a>
                    </li>
                ))}
            </ul>
        )
    }
</li>

<style>
    .link {
        color: var(--link-color);

        text-decoration: underline;
        text-decoration-color: transparent;
        text-decoration-skip-ink: auto;
        text-decoration-thickness: 2px;
        text-underline-offset: 0ex;
        transition: all 0.25s ease-in-out;

        &:hover,
        &:focus-visible {
            text-decoration: underline;
            text-decoration-color: var(--link-color);
            text-decoration-skip-ink: auto;
            text-decoration-thickness: 2px;
            text-underline-offset: 0.2ex;
        }
    }

    .title {
        align-items: first baseline;
        display: flex;
        gap: var(--space-half);
    }

    .link-icon {
        height: 0.75em;
        width: 0.75em;
    }

    .date {
        color: var(--text-secondary);
    }

    .image {
        aspect-ratio: 2/1;
        border-radius: 12px;
        grid-column: 1;
        margin-block-end: 8px;
        object-fit: cover;
        object-position: top center;

        @media (min-width: 600px) {
            margin: 0;
        }
    }

    .description {
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 3;
        overflow: hidden;
    }

    .tag-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0 var(--space-half);
    }

    .tag {
        line-height: 1;

        a {
            color: var(--text-secondary);
            display: block;
            text-decoration-color: transparent;
            transition: all 0.25s ease-in-out;
            white-space: nowrap;
            width: min-content;

            &:hover,
            &:focus-visible {
                text-decoration-color: var(--link-color);
            }
        }
    }
</style>
