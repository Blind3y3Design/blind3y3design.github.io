---
import type { Polymorphic } from 'astro/types';

type Tag = 'a' | 'button';

type Props<TagGeneric extends Tag> = {
    tag: TagGeneric;
    variant?: 'primary' | 'secondary';
    type: 'icon' | 'text';
    classList?: string[];
} & Polymorphic<{ as: TagGeneric }>;

const {
    tag: Tag,
    variant = 'primary',
    classList = [],
    href,
    type = 'button',
    ...rest
} = Astro.props;

const baseAttributes = {
    classes: ['button', variant, ...classList],
    ...rest,
};

const anchorAttributes = {
    href: href,
};

const buttonAttributes = {
    type: type,
};

const attributeBasedOnTag = Tag === 'a' ? anchorAttributes : buttonAttributes;

const allAttributes = { ...baseAttributes, ...attributeBasedOnTag };

const { classes, ...attributes } = allAttributes;
---

<Tag class:list={[classes]} data-type={type} {...attributes}>
    <slot />
</Tag>

<style>
    .button {
        background: transparent;
        border-radius: var(--border-radius-s);
        color: var(--link-color);
        transition: background 0.25s ease-in-out;

        &[data-type='icon'] {
            padding: var(--space-1);
        }

        &[data-type='text'] {
            padding: var(--space-half) var(--space-1);
        }

        &:hover,
        &:focus-visible {
            background: var(--surface-raised);
        }
    }
</style>
